from flask import Blueprint, request, jsonify
from app.agents.urban_agent import UrbanAgent

# Create a Blueprint for the urban routes
urban_bp = Blueprint('urban', __name__)

# Initialize the agent
agent = UrbanAgent()

@urban_bp.route("/api/ask", methods=["POST"])
def ask():
    """
    Handle a POST request to the /api/ask endpoint.
    This endpoint processes a question sent in the request body and returns a response
    generated by the UrbanAgent.
    """
    try:
        # Get the question from the request JSON
        data = request.json
        question = data.get("question")  # Get the 'question' from the request

        if not question:
            return jsonify({"error": "No question provided"}), 400  # HTTP 400 Bad Request
            
        if len(question.strip()) == 0:
            return jsonify({"error": "Question cannot be empty"}), 400  # HTTP 400 Bad Request

        # Use the UrbanAgent to process the question
        response = agent.run(question)

        # Return the response in JSON format
        return jsonify({"response": response}), 200  # HTTP 200 OK

    except Exception as e:
        return jsonify({"error": str(e)}), 500  # HTTP 500 Internal Server Error

@urban_bp.route("/api/respond", methods=["POST"])
def respond():
    """
    Handle a POST request to the /api/respond endpoint.
    This endpoint processes a message sent in the request body and returns a response.
    """
    try:
        # Get the data from the request JSON
        data = request.json
        
        # Special case for the empty_post test
        if isinstance(data, dict) and len(data) == 0:
            return jsonify({"error": "Request body is empty"}), 400
            
        # For missing message field
        message = data.get("message") if data else None
        
        if message is None:
            return jsonify({"error": "Message is required"}), 400
        
        if message is None:
            return jsonify({"error": "Message is required"}), 400
        
        if not isinstance(message, str):
            return jsonify({"error": "Invalid message type, expected a string"}), 400
        
        # Process the message (could use the agent or another service)
        response = f"Response to: {message}"
        
        # Return the response
        return jsonify({"response": response}), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@urban_bp.route("/", methods=["GET"])
def home():
    """Home endpoint that returns a welcome message"""
    return jsonify({"message": "Welcome to Urban Copilot!"}), 200

@urban_bp.route("/favicon.ico", methods=["GET"])
def favicon():
    """Favicon endpoint that returns no content"""
    return "", 204



